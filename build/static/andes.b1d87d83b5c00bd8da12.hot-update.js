webpackHotUpdate("andes",{

/***/ "./packages/andes-theme/src/Publicaciones.js":
/*!***************************************************!*\
  !*** ./packages/andes-theme/src/Publicaciones.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _Filosofia__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Filosofia */ \"./packages/andes-theme/src/Filosofia.js\");\n/* harmony import */ var _dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataPublicaciones */ \"./packages/andes-theme/src/dataPublicaciones.js\");\n/* harmony import */ var _SearchBar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SearchBar */ \"./packages/andes-theme/src/SearchBar.js\");\n/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ \"./node_modules/@fortawesome/react-fontawesome/index.es.js\");\n/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ \"./node_modules/@fortawesome/free-solid-svg-icons/index.es.js\");\n/* harmony import */ var _bgImage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bgImage */ \"./packages/andes-theme/src/bgImage.js\");\n/* harmony import */ var _LinkButton__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./LinkButton */ \"./packages/andes-theme/src/LinkButton.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var SectionPublications=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e14r3tat0\",label:\"SectionPublications\"})( false?undefined:{name:\"1gt2fij\",styles:\"display:flex;align-items:center;justify-content:space-between;flex-wrap:wrap;padding:0rem 2rem 1rem 2rem;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PublicationCard=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e14r3tat1\",label:\"PublicationCard\"})( false?undefined:{name:\"1k8jpb7\",styles:\"display:flex;flex-basis:22%;justify-content:center;align-items:center;padding:0 1rem;cursor:pointer;&:hover{background-color:#dbdbdb;}img{width:20%;margin-right:1rem;}p{color:#545454;line-height:1.3;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MatchPublication=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e14r3tat2\",label:\"MatchPublication\"})( false?undefined:{name:\"1ry0bb3\",styles:\"display:flex;align-items:center;margin:2rem 10rem;cursor:pointer;&:hover{background-color:#dbdbdb;}img{width:20%;margin-right:1rem;}div{display:flex;flex-direction:column;justify-content:space-between;h3{font-size:1.1rem;margin-bottom:0;}span{font-size:.9rem;color:#545454;margin-top:0;}p{color:#545454;font-size:1rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var _ref= false?undefined:{name:\"1d73157-Publicaciones\",styles:\"font-size:1.8rem;color:#44841a;;label:Publicaciones;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Publicaciones=()=>{var[searchTerm,setSearchTerm]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[searchResults,setSearchResults]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]);var[alternativeTerm,setAlternativeTerm]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var handleChange=event=>{setSearchTerm(event.target.value);};var handleSubmit=e=>{e.preventDefault();var results=_dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__[\"dataPublications\"].filter(publication=>publication.content.toLowerCase().includes(searchTerm.toLowerCase()));setSearchResults(results);console.log(results);console.log(\"searchTerm \",searchTerm);if(results.length===0&&searchTerm){setAlternativeTerm(searchTerm);}setSearchTerm(\"\");};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"MarginTopContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"HeadContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"Title\"],null,\"Publicaciones\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"SubTitle\"],null,\"Investigacion\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"br\",null),\"Portal de Conocimiento\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"Separator\"],null)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"SectionContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_SearchBar__WEBPACK_IMPORTED_MODULE_6__[\"SearchBar\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_SearchBar__WEBPACK_IMPORTED_MODULE_6__[\"InputBar\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_7__[\"FontAwesomeIcon\"],{css:_ref,icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faSearch\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"input\",{type:\"text\",placeholder:\"What are you searching for?\",value:searchTerm,onChange:handleChange})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_bgImage__WEBPACK_IMPORTED_MODULE_9__[\"ButtonAction\"],{onClick:handleSubmit},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_LinkButton__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{href:\"/publicaciones\"},\"BUSCAR\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionPublications,null,searchResults.length===0&&alternativeTerm===\"\"?Object.keys(_dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__[\"dataPublications\"]).map(publication=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,console.log(\"first render\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(PublicationCard,{href:\"/\".concat(_dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__[\"dataPublications\"][publication].url)},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:_dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__[\"dataPublications\"][publication].titulo}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,_dataPublicaciones__WEBPACK_IMPORTED_MODULE_5__[\"dataPublications\"][publication].content)))):null,searchResults.length>0?Object.keys(searchResults).map(publication=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,console.log(\"match\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MatchPublication,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:searchResults[publication].titulo}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,searchResults[publication].content),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",null,\"Autor: \",searchResults[publication].autor),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,searchResults[publication].date))))):null,alternativeTerm!==\"\"&&searchResults.length===0?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,console.log(\"not found\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_SearchBar__WEBPACK_IMPORTED_MODULE_6__[\"NotFoundContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",null,\"Oops!\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"We coudn't find any content related to the word \\\"\",alternativeTerm,\"\\\"\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Plase use another term of search\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Thank you.\"))):null));};/* harmony default export */ __webpack_exports__[\"default\"] = (Publicaciones);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/andes-theme/src/Publicaciones.js\n");

/***/ })

})