webpackHotUpdate("andes-headless-spanish",{

/***/ "./packages/andes-theme/src/components/HomePage.js":
/*!*********************************************************!*\
  !*** ./packages/andes-theme/src/components/HomePage.js ***!
  \*********************************************************/
/*! exports provided: SectionText, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SectionText\", function() { return SectionText; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Filosofia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Filosofia */ \"./packages/andes-theme/src/components/Filosofia.js\");\n/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Link */ \"./packages/andes-theme/src/components/Link.js\");\n/* harmony import */ var _Loading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Loading */ \"./packages/andes-theme/src/components/Loading.js\");\n/* harmony import */ var _Root__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Root */ \"./packages/andes-theme/src/components/Root.js\");\n/* harmony import */ var _frontity_components_image__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @frontity/components/image */ \"./node_modules/@frontity/components/image.tsx\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff0\",label:\"Content\"})(\"background-image:url(\",props=>props.background,\");background-repeat:no-repeat;background-size:cover;background-position:center center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var TextoImagen=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff1\",label:\"TextoImagen\"})( false?undefined:{name:\"kd74ow\",styles:\"background-image:linear-gradient(to top,rgba(34,49,63,.5),rgba(34,49,63,.6));color:#FFF;display:flex;padding:1.5rem;flex-direction:column;justify-content:space-between;align-content:flex-start;overflow-wrap:break-word;@media(min-width:768px){height:573px;padding:6rem;}h1{text-transform:uppercase;font-size:2rem;letter-spacing:4px;margin-top:5rem;@media(min-width:768px){font-size:4.5rem;margin-right:20rem;}}p{font-size:1rem;margin-top:0;margin-bottom:2rem;line-height:1.8;font-family:'Montserrat',sans-serif;@media(min-width:768px){font-size:1.5rem;margin-bottom:2rem;margin-right:10rem;}}div{display:flex;justify-content:flex-start;align-items:center;a{text-decoration:none;background-color:#f07723;text-transform:uppercase;color:#fff;padding:1.2rem 2.2rem;border-radius:10px;text-align:center;margin-bottom:2rem;font-weight:700;font-size:1.2rem;&:hover{background-color:#F05523;transition:all 0.4s;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SectionText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff2\",label:\"SectionText\"})( false?undefined:{name:\"ppc61v\",styles:\"display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;padding:3rem 2rem 1rem 2rem;@media(max-width:768px){-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column;padding:3rem 1rem 1rem 1rem;}div{display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column;padding:1rem 2rem 1rem 2rem;@media(max-width:768px){padding:1rem;}h1,h2{color:#44841a;text-align:center;}p{color:#545454;font-size:1.2rem;margin-bottom:1rem;text-align:center;}div{display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;a{text-decoration:none;background-color:#f07723;text-transform:uppercase;color:#fff;padding:1rem;border-radius:10px;text-align:center;margin-bottom:2rem;font-weight:700;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SectionHomePage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff3\",label:\"SectionHomePage\"})( false?undefined:{name:\"fstzj5\",styles:\"background-color:#eaeaea;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardsHomeContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff4\",label:\"CardsHomeContainer\"})( false?undefined:{name:\"hti4b4\",styles:\"display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;padding:2rem;@media (max-width:768px){-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column;padding:0rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FsZXhmL0RvY3VtZW50cy9yZWFjdF9wcm9qZWN0cy9BbmRlc1dlYnNpdGUvcGFja2FnZXMvYW5kZXMtdGhlbWUvc3JjL2NvbXBvbmVudHMvSG9tZVBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0xxQyIsImZpbGUiOiIvaG9tZS9hbGV4Zi9Eb2N1bWVudHMvcmVhY3RfcHJvamVjdHMvQW5kZXNXZWJzaXRlL3BhY2thZ2VzL2FuZGVzLXRoZW1lL3NyYy9jb21wb25lbnRzL0hvbWVQYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQge01hcmdpblRvcENvbnRhaW5lcn0gZnJvbSAnLi9GaWxvc29maWEnO1xuaW1wb3J0IExpbmsgZnJvbSAnLi9MaW5rJztcbmltcG9ydCBMb2FkaW5nIGZyb20gJy4vTG9hZGluZyc7XG5pbXBvcnQge3JlYWRNb3JlLCBnZXRNb3JlLCBleHBsb3JlLCBsZWFybn0gZnJvbSAnLi9Sb290J1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSBcIkBmcm9udGl0eS9jb21wb25lbnRzL2ltYWdlXCI7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2YCAgXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMuYmFja2dyb3VuZH0pO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciBjZW50ZXI7XG5gXG5jb25zdCBUZXh0b0ltYWdlbiA9IHN0eWxlZC5kaXZgXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgcmdiYSgzNCw0OSw2MywgLjUpLCByZ2JhKDM0LCA0OSwgNjMsIC42KSk7XG4gICAgY29sb3I6ICNGRkY7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwYWRkaW5nOiAxLjVyZW07XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcbiAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xuICAgXG4gICAgQG1lZGlhKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgaGVpZ2h0OiA1NzNweDtcbiAgICAgICAgcGFkZGluZzogNnJlbTtcbiAgICB9XG5cbiAgICBoMSB7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDRweDtcbiAgICAgICAgbWFyZ2luLXRvcDogNXJlbTtcblxuICAgICAgICBAbWVkaWEobWluLXdpZHRoOiA3NjhweCkge1xuICAgICAgICAgICAgZm9udC1zaXplOiA0LjVyZW07XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDIwcmVtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuODtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcblxuICAgICAgICBAbWVkaWEobWluLXdpZHRoOiA3NjhweCkge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHJlbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICAgICBkaXYge1xuXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMDc3MjM7XG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxLjJyZW0gMi4ycmVtO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcblxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjA1NTIzO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICB9ICAgIFxuYFxuXG5leHBvcnQgY29uc3QgU2VjdGlvblRleHQgPSBzdHlsZWQuZGl2YFxuXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xuICAgICAgICAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmc6IDNyZW0gMnJlbSAxcmVtIDJyZW07XG5cbiAgICBAbWVkaWEobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgcGFkZGluZzogM3JlbSAxcmVtIDFyZW0gMXJlbTtcbiAgICB9XG5cbiAgIGRpdiB7XG4gICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xuICAgICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgLXdlYmtpdC1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW0gMXJlbSAycmVtO1xuXG4gICAgICAgQG1lZGlhKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICB9XG5cbiAgICAgICBoMSwgaDIge1xuICAgICAgICAgICBjb2xvcjogIzQ0ODQxYTtcbiAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgIH1cblxuICAgICAgIHAge1xuICAgICAgICAgICBjb2xvcjogIzU0NTQ1NDtcbiAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICB9ICBcblxuXG4gICAgICAgZGl2IHtcbiAgICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgIFxuICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMDc3MjM7XG4gICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICB9XG4gICAgICAgfVxuICAgfVxuYDtcblxuY29uc3QgU2VjdGlvbkhvbWVQYWdlID0gc3R5bGVkLmRpdmAgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VhZWFlYTtcbmA7XG5cbmNvbnN0IENhcmRzSG9tZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICAgXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcbiAgICAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmc6IDJyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpe1xuICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgcGFkZGluZzogMHJlbTtcbiAgICB9XG5gO1xuXG5jb25zdCBDYXJkc0hvbWUgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiBcbiAgZGlzcGxheTogZmxleDtcbiAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgICAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgLXdlYmtpdC1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgbWFyZ2luOiAxcmVtIDJyZW07XG4gICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMzMuMzMlO1xuICAgICAgIC13ZWJraXQtZmxleC1iYXNpczogMzMuMzMlO1xuICAgICAgICAgICBmbGV4LWJhc2lzOiAzMy4zMyU7XG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuXG4gICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpe1xuICAgICAgIG1hcmdpbjogMXJlbTtcbiAgIH1cblxuICAgZGl2IHtcbiAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgXG4gICAgICAgc3Ryb25nIHtcbiAgICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gICAgICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjA3NzIzIDtcbiAgICAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgICAgIGJvcmRlci1yYWRpdXM6IC41cmVtO1xuICAgICAgICAgICB0b3A6IC0uNXJlbTtcbiAgICAgICAgICAgbGVmdDogLTEuMnJlbTtcbiAgICAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcbiAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTMwZGVnKTtcbiAgICAgICAgICAgICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgtMzBkZWcpO1xuICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0zMGRlZyk7XG4gICAgICAgfVxuICAgfVxuXG4gICBoMyB7XG4gICAgICAgY29sb3I6ICM0NDg0MWE7XG4gICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgfVxuXG4gICBzcGFuIHtcbiAgICAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMnJlbSAxcmVtO1xuICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgZm9udC1zaXplOiAxcmVtOyAgXG4gICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyAgICAgIFxuICAgfVxuXG4gICBkaXYge1xuICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA1MCU7XG4gICAgICAgLXdlYmtpdC1mbGV4LWJhc2lzOiA1MCU7XG4gICAgICAgICAgICAgICBmbGV4LWJhc2lzOiA1MCU7XG4gICAgICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xuICAgICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG5cbiAgICAgICBhIHtcbiAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDQ4NDFhO1xuICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgcGFkZGluZzogLjhyZW07XG4gICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICB9XG4gICB9XG5gO1xuXG5jb25zdCBJbWFnZUNhcmRIb21lID0gc3R5bGVkKEltYWdlKWBcblxuICAgIHdpZHRoOiAxMDAlO1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICBtYXgtaGVpZ2h0OiA0MHZoOyAvKipuZXcgbGluZSBpbWFnZSBoZWlnaHQgKi9cbiAgICAgICBcbmBcblxuY29uc3QgSG9tZVBhZ2UgPSAoe3N0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXN9KSA9PiB7XG5cbiAgICBjb25zdCBwYWdlSG9tZSA9IHN0YXRlLnNvdXJjZS5wYWdlWzY5XTtcblxuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KCcvY2FyZGltYWdlJyk7XG5cbiAgICBsZXQgY2FyZEltYWdlc0FyciA9IFtdO1xuXG4gICAgXG4gICAgaWYoZGF0YS5pc1JlYWR5KSB7XG4gICAgICAgIFxuICAgICAgICBkYXRhLml0ZW1zLm1hcCgoe2lkfSkgPT4geyBcbiAgICAgICAgICAgICAgICBpZihzdGF0ZS50aGVtZS5sYW5nID09PSBcImVuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RhdGUuc291cmNlLmNhcmRpbWFnZVtpZF0uZmlsdGVyYnlwYWdlWzBdID09PSAyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEltYWdlc0Fyci5wdXNoKHN0YXRlLnNvdXJjZS5jYXJkaW1hZ2VbaWRdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN0YXRlLnNvdXJjZS5jYXJkaW1hZ2VbaWRdLmZpbHRlcmJ5cGFnZVswXSA9PT0gMjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRJbWFnZXNBcnIucHVzaChzdGF0ZS5zb3VyY2UuY2FyZGltYWdlW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cbiAgIFxuICAgIHJldHVybiAoICAgICAgICBcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHt0eXBlb2YgcGFnZUhvbWUgPT09IFwidW5kZWZpbmVkXCIgPyA8TG9hZGluZyAvPiA6IFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgIDxNYXJnaW5Ub3BDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPENvbnRlbnQgYmFja2dyb3VuZCA9IHtwYWdlSG9tZS5hY2YuaW1hZ2VfYmFja2dyb3VuZH0+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0b0ltYWdlbiA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9eyB7X19odG1sOiBwYWdlSG9tZS5hY2YuaG9tZV90aXRsZX19PjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBkYW5nZXJvdXNseVNldElubmVySFRNTD17IHtfX2h0bWw6IHBhZ2VIb21lLmFjZi5ob21lX3Nsb2dhbn19PjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17cGFnZUhvbWUuYWNmLmhvbWVfYnV0dG9uX2dldG1vcmV9IHRhcmdldD1cIl9ibGFua1wiPntnZXRNb3JlfTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dG9JbWFnZW4+XG4gICAgICAgICAgICAgICAgPC9Db250ZW50PlxuICAgICAgICAgICAgPC9NYXJnaW5Ub3BDb250YWluZXI+XG4gICAgICAgICAgICA8U2VjdGlvblRleHQ+XG4gICAgICAgICAgICAgICAgPGRpdj4gIFxuICAgICAgICAgICAgICAgICAgICA8aDE+e3BhZ2VIb21lLmFjZi5zZWN0aW9uMV90aXRsZX08L2gxPiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAge3BhZ2VIb21lLmFjZi5zZWN0aW9uMV90ZXh0Y29udGVudH1cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPXtwYWdlSG9tZS5hY2Yuc2VjdGlvbjFfYnV0dG9uX2V4cGxvcmV9PntleHBsb3JlfTwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1NlY3Rpb25UZXh0PlxuXG5cbiAgICAgICAgPFNlY3Rpb25Ib21lUGFnZT5cbiAgICAgICAgPENhcmRzSG9tZUNvbnRhaW5lcj5cbiAgICAgICAgICAgIHtkYXRhLmlzUmVhZHkgP1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICB7Y2FyZEltYWdlc0Fyci5zbGljZSgwLDMpLnJldmVyc2UoKS5tYXAoIGNhcmRJbWFnZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybihcblxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRzSG9tZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2VDYXJkSG9tZSBzcmM9e2NhcmRJbWFnZXMuYWNmLmltYWdlX2NhcmQuc2l6ZXMubWVkaXVtX2xhcmdlfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57Y2FyZEltYWdlcy50aXRsZS5yZW5kZXJlZH08L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBjYXJkSW1hZ2VzLmV4Y2VycHQucmVuZGVyZWR9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9eyAgY2FyZEltYWdlcy5hY2YubGlua19jYXJkfSA+e3JlYWRNb3JlfTwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmRzSG9tZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSl9XG5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvQ2FyZHNIb21lQ29udGFpbmVyPlxuXG4gICAgICAgICAgICA8L1NlY3Rpb25Ib21lUGFnZT4gICAgICAgXG5cbiAgICAgICAgICAgIDxTZWN0aW9uVGV4dD5cbiAgICAgICAgICAgIDxkaXY+ICBcbiAgICAgICAgICAgICAgICA8aDE+e3BhZ2VIb21lLmFjZi5zZWN0aW9uMzFfdGl0bGV9PC9oMT4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICB7cGFnZUhvbWUuYWNmLnNlY3Rpb24zMV90ZXh0Y29udGVudH1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj17cGFnZUhvbWUuYWNmLnNlY3Rpb24zMV9idXR0b25fbGVhcm59PntsZWFybn08L0xpbms+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdj4gIFxuICAgICAgICAgICAgICAgIDxoMT57cGFnZUhvbWUuYWNmLnNlY3Rpb24zMl90aXRsZX08L2gxPiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIHtwYWdlSG9tZS5hY2Yuc2VjdGlvbjMyX3RleHRjb250ZW50fVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPXtwYWdlSG9tZS5hY2Yuc2VjdGlvbjMyX2J1dHRvbl9sZWFybn0+e2xlYXJufTwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1NlY3Rpb25UZXh0PlxuXG4gICAgICAgIDxTZWN0aW9uSG9tZVBhZ2U+XG4gICAgICAgIDxDYXJkc0hvbWVDb250YWluZXI+XG4gICAgICAgICAgICB7ZGF0YS5pc1JlYWR5ID8gICAgXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIHtjYXJkSW1hZ2VzQXJyLnNsaWNlKDMsNikucmV2ZXJzZSgpLm1hcCggY2FyZEltYWdlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybihcblxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRzSG9tZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlQ2FyZEhvbWUgc3JjPXtjYXJkSW1hZ2VzLmFjZi5pbWFnZV9jYXJkLnNpemVzLm1lZGl1bV9sYXJnZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+e2NhcmRJbWFnZXMuYWNmLnRhZ19jYXJkfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+e2NhcmRJbWFnZXMudGl0bGUucmVuZGVyZWR9PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY2FyZEltYWdlcy5leGNlcnB0LnJlbmRlcmVkfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsgIGNhcmRJbWFnZXMuYWNmLmxpbmtfY2FyZH0gdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiID57cmVhZE1vcmV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgXG4gICAgICAgICAgICAgICAgPC9DYXJkc0hvbWU+XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuXG4gICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0NhcmRzSG9tZUNvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvU2VjdGlvbkhvbWVQYWdlPiAgICAgICBcbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgIH0gXG4gICAgICAgIDwvPlxuICAgIClcbn1cbiBcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZVBhZ2UpOyJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardsHome=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff5\",label:\"CardsHome\"})( false?undefined:{name:\"74awem\",styles:\"display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column;margin:1rem 2rem;-ms-flex-preferred-size:33.33%;-webkit-flex-basis:33.33%;flex-basis:33.33%;background-color:#fff;@media (max-width:768px){margin:1rem;}div{position:relative;strong{display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;background-color:#f07723;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;position:absolute;padding:.5rem;border-radius:.5rem;top:-.5rem;left:-1.2rem;font-size:.8rem;color:#fff;-webkit-transform:rotate(-30deg);-ms-transform:rotate(-30deg);transform:rotate(-30deg);}}h3{color:#44841a;text-align:center;}span{padding:1rem 1rem 2rem 1rem;font-weight:400;font-size:1rem;text-align:center;}div{display:-webkit-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-preferred-size:50%;-webkit-flex-basis:50%;flex-basis:50%;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;margin-bottom:1rem;a{text-decoration:none;background-color:#44841a;color:#fff;padding:.8rem;border-radius:10px;text-align:center;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ImageCardHome=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_frontity_components_image__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{target:\"ecnu3ff6\",label:\"ImageCardHome\"})( false?undefined:{name:\"1ul8by2\",styles:\"width:100%;align-self:center;max-height:40vh;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HomePage=(_ref)=>{var{state,actions,libraries}=_ref;var pageHome=state.source.page[69];var data=state.source.get('/cardimage');var cardImagesArr=[];if(data.isReady){data.items.map((_ref2)=>{var{id}=_ref2;if(state.theme.lang===\"en\"){if(state.source.cardimage[id].filterbypage[0]===25){cardImagesArr.push(state.source.cardimage[id]);}}else{if(state.source.cardimage[id].filterbypage[0]===26){cardImagesArr.push(state.source.cardimage[id]);}}});}return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,typeof pageHome===\"undefined\"?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Loading__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null):Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_3__[\"MarginTopContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Content,{background:pageHome.acf.image_background},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(TextoImagen,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h1\",{dangerouslySetInnerHTML:{__html:pageHome.acf.home_title}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",{dangerouslySetInnerHTML:{__html:pageHome.acf.home_slogan}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:pageHome.acf.home_button_getmore,target:\"_blank\"},_Root__WEBPACK_IMPORTED_MODULE_6__[\"getMore\"]))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(SectionText,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h1\",null,pageHome.acf.section1_title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",null,pageHome.acf.section1_textcontent),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{href:pageHome.acf.section1_button_explore},_Root__WEBPACK_IMPORTED_MODULE_6__[\"explore\"])))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(SectionHomePage,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(CardsHomeContainer,null,data.isReady?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,cardImagesArr.slice(0,3).reverse().map(cardImages=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(ImageCardHome,{src:cardImages.acf.image_card.sizes.medium_large})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",null,cardImages.title.rendered),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"span\",{dangerouslySetInnerHTML:{__html:cardImages.excerpt.rendered}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{href:cardImages.acf.link_card},_Root__WEBPACK_IMPORTED_MODULE_6__[\"readMore\"])));})):null)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(SectionText,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h1\",null,pageHome.acf.section31_title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",null,pageHome.acf.section31_textcontent),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{href:pageHome.acf.section31_button_learn},_Root__WEBPACK_IMPORTED_MODULE_6__[\"learn\"]))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h1\",null,pageHome.acf.section32_title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"p\",null,pageHome.acf.section32_textcontent),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{href:pageHome.acf.section32_button_learn},_Root__WEBPACK_IMPORTED_MODULE_6__[\"learn\"])))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(SectionHomePage,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(CardsHomeContainer,null,data.isReady?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,cardImagesArr.slice(3,6).reverse().map(cardImages=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(ImageCardHome,{src:cardImages.acf.image_card.sizes.medium_large}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"strong\",null,cardImages.acf.tag_card)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"h3\",null,cardImages.title.rendered),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"span\",{dangerouslySetInnerHTML:{__html:cardImages.excerpt.rendered}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"a\",{href:cardImages.acf.link_card,target:\"_blank\",rel:\"noopener noreferrer\"},_Root__WEBPACK_IMPORTED_MODULE_6__[\"readMore\"])));})):null))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(HomePage));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/andes-theme/src/components/HomePage.js\n");

/***/ })

})