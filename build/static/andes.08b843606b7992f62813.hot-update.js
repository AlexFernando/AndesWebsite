webpackHotUpdate("andes",{

/***/ "./packages/andes-theme/src/components/potatoPark.js":
/*!***********************************************************!*\
  !*** ./packages/andes-theme/src/components/potatoPark.js ***!
  \***********************************************************/
/*! exports provided: SectionContainer, MainParagraph, CardsContainer, Card, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SectionContainer\", function() { return SectionContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MainParagraph\", function() { return MainParagraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CardsContainer\", function() { return CardsContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Card\", function() { return Card; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _Filosofia__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Filosofia */ \"./packages/andes-theme/src/components/Filosofia.js\");\n/* harmony import */ var _static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../static/images/parquepapa.jpg */ \"./packages/andes-theme/src/static/images/parquepapa.jpg\");\n/* harmony import */ var _static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _static_images_parquepapa2_jpg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../static/images/parquepapa2.jpg */ \"./packages/andes-theme/src/static/images/parquepapa2.jpg\");\n/* harmony import */ var _static_images_parquepapa2_jpg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_static_images_parquepapa2_jpg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _static_images_link4_jpeg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../static/images/link4.jpeg */ \"./packages/andes-theme/src/static/images/link4.jpeg\");\n/* harmony import */ var _static_images_link4_jpeg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_static_images_link4_jpeg__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ \"./node_modules/@fortawesome/free-solid-svg-icons/index.es.js\");\n/* harmony import */ var _TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TerritoriosCulturales */ \"./packages/andes-theme/src/components/TerritoriosCulturales.js\");\n/* harmony import */ var _Dropdown__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Dropdown */ \"./packages/andes-theme/src/components/Dropdown.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var SectionContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8gjcr60\",label:\"SectionContainer\"})( false?undefined:{name:\"1lbhro0\",styles:\"display:flex;flex-direction:column;padding:0rem 2rem 2rem 2rem;@media(max-width:768px){padding:0 1rem 0 1rem;}p{padding:2rem 25rem 0 4rem;line-height:1.5;font-size:1.1rem;color:#545454;margin-bottom:0;@media(max-width:768px){padding:0 1rem 0 1rem;font-size:1rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MainParagraph=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\",{target:\"e8gjcr61\",label:\"MainParagraph\"})( false?undefined:{name:\"570a29\",styles:\"padding:0 25rem 0 4rem;line-height:1.5;font-size:1.4rem;color:#4c4c4c;@media(max-width:768px){padding:0 1rem 0 1rem;font-size:1.2rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardsContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8gjcr62\",label:\"CardsContainer\"})( false?undefined:{name:\"1l4rssn\",styles:\"display:flex;justify-content:center;@media (max-width:768px){flex-direction:column;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FsZXhmL3JlYWN0XzIwMjAvYW5kZXMvcGFja2FnZXMvYW5kZXMtdGhlbWUvc3JjL2NvbXBvbmVudHMvcG90YXRvUGFyay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnRHdDIiwiZmlsZSI6Ii9ob21lL2FsZXhmL3JlYWN0XzIwMjAvYW5kZXMvcGFja2FnZXMvYW5kZXMtdGhlbWUvc3JjL2NvbXBvbmVudHMvcG90YXRvUGFyay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2Nvbm5lY3QsIGNzcywgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQge0hlYWRDb250YWluZXIsIFRpdGxlLCBTdWJUaXRsZSwgU2VwYXJhdG9yLCBNYXJnaW5Ub3BDb250YWluZXJ9IGZyb20gJy4vRmlsb3NvZmlhJztcbmltcG9ydCBpbWdBZ3JpY3VsdG9yZXMgZnJvbSAnLi4vc3RhdGljL2ltYWdlcy9wYXJxdWVwYXBhLmpwZyc7XG5pbXBvcnQgaW1nU2lzdGVtYUF5bGx1IGZyb20gJy4uL3N0YXRpYy9pbWFnZXMvcGFycXVlcGFwYTIuanBnJztcbmltcG9ydCBpbWdJbm5vdmFjaW9uZUJpbyBmcm9tICcuLi9zdGF0aWMvaW1hZ2VzL2xpbms0LmpwZWcnO1xuXG5pbXBvcnQge2ZhTGlzdEFsdCwgZmFBcnJvd0FsdENpcmNsZVJpZ2h0LCBmYU1vdW50YWluLCBmYU1hbGUsIGZhTGFuZ3VhZ2UsIGZhRXhjbGFtYXRpb25UcmlhbmdsZSwgZmFUcmFjdG9yLCBmYVNlZWRsaW5nLCBmYUhpa2luZywgZmFVdGVuc2lscywgZmFIYW5kcywgZmFDYXJyb3R9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7XG5pbXBvcnQge0ZvbnRBd2Vzb21lSWNvbkxpc3QsIEZvbnRBd2Vzb21lSWNvblN0eWxlZCwgQnJpZWZTZWN0aW9uLCBJbmZvSXRlbX0gZnJvbSAnLi9UZXJyaXRvcmlvc0N1bHR1cmFsZXMnO1xuXG5pbXBvcnQgeyBWZXJ0aWNhbEJvcmRlciB9IGZyb20gJy4vRHJvcGRvd24nO1xuXG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZzogMHJlbSAycmVtIDJyZW0gMnJlbTtcblxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAgIHBhZGRpbmc6IDAgMXJlbSAwIDFyZW07XG4gICAgfVxuXG4gICAgcCB7XG4gICAgICAgIHBhZGRpbmc6IDJyZW0gMjVyZW0gMCA0cmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgICAgICAgY29sb3I6ICM1NDU0NTQ7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG5cbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgMXJlbSAwIDFyZW07XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgIH1cbiAgICB9XG5gO1xuXG5leHBvcnQgY29uc3QgTWFpblBhcmFncmFwaCA9IHN0eWxlZC5zcGFuYFxuICAgICAgICBwYWRkaW5nOiAwIDI1cmVtIDAgNHJlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgIGNvbG9yOiAjNGM0YzRjO1xuXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIDFyZW0gMCAxcmVtO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgICAgIH1cbmBcblxuZXhwb3J0IGNvbnN0IENhcmRzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhcmQgPSBzdHlsZWQuZGl2YFxuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGZsZXgtYmFzaXM6IDMzLjMzJTtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWFlYWRlO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI7XG4gICAgbWFyZ2luOiAycmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7XG4gICAgICAgIG1hcmdpbjogMXJlbSAwIDFyZW0gMDtcbiAgICB9XG5cbiAgICBpbWcge1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDFyZW0gMXJlbSAwIDA7ICAgICAgICBcbiAgICB9XG5cbiAgICBoMyB7XG4gICAgICAgIGNvbG9yOiAjNDQ4NDFhO1xuICAgICAgICBwYWRkaW5nOiAwIDFyZW0gMCAxcmVtO1xuICAgIH1cblxuICAgIHNwYW4ge1xuICAgICAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMnJlbSAxcmVtO1xuICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgIGNvbG9yOiAjNTQ1NDU0O1xuICAgIH1cbiAgICBcbiAgICBhIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjA3NzIzO1xuICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgcGFkZGluZzogLjhyZW07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgfVxuYDtcblxuY29uc3QgU2VjdGlvbkluZm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMnJlbSAwO1xuICAgIGgye1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuYDtcblxuY29uc3QgRmFzdEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDRyZW0gMDtcblxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICAgIG1hcmdpbjogMXJlbSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcCB7XG4gICAgICAgIGNvbG9yOiAjMDAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbmA7XG5jb25zdCBQb3RhdG9QYXJrID0gKHtzdGF0ZX0pID0+IHtcbiAgICByZXR1cm4gKCBcbiAgICAgICAgPE1hcmdpblRvcENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxIZWFkQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgUG90YXRvIFBhcmsgLSBQaXNhcVxuICAgICAgICAgICAgICAgIDwvVGl0bGU+XG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvcj48L1NlcGFyYXRvcj5cbiAgICAgICAgICAgICAgICA8U3ViVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIFRoZSBBeWxsdSBTeXN0ZW08YnI+PC9icj5CaW9jdWx0dXJhbCBpbm5vdmF0aW9uc1xuICAgICAgICAgICAgICAgIDwvU3ViVGl0bGU+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwvSGVhZENvbnRhaW5lcj5cblxuICAgICAgICAgICAgPFNlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPE1haW5QYXJhZ3JhcGg+XG4gICAgICAgICAgICAgICAgICAgIFRoZSBQb3RhdG8gUGFyayBpcyBub3QganVzdCBhIGNvbnNlcnZhdGlvbiBpbml0aWF0aXZlIGZvciB2YXJpb3VzIHZhcmlldGllcyBvZiBwb3RhdG9lcy4gSXQgaXMsIGFib3ZlIGFsbCwgYSBiaW8tY3VsdHVyYWwgdGVycml0b3J5IGRlZGljYXRlZCB0byB0aGUgY29uc2VydmF0aW9uIG9mIHRoZSBoZXJpdGFnZSBvZiBzaXggaW5kaWdlbm91cyBjb21tdW5pdGllcyB0aGF0IGxpdmUgaGVyZTogbm90IG9ubHkgaHVuZHJlZHMgb2YgY3VsdGl2YXRlZCB2YXJpZXRpZXMgYnV0IGFsc28gcmVsYXRlZCB3aWxkIHNwZWNpZXMsIHRoZSBsYW5kc2NhcGUgYW5kIGl0cyBlbGVtZW50cyB0aGF0IGFsc28gaW5jbHVkZSBrbm93bGVkZ2UsIHRyYWRpdGlvbnMsIGlubm92YXRpb25zIGFuZCB0aGUgd29ybGR2aWV3IG9mIHRoZSBtb3JlIHRoYW4gNjAwMCBpbmhhYml0YW50cy5cbiAgICAgICAgICAgICAgICA8L01haW5QYXJhZ3JhcGg+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPFNlY3Rpb25JbmZvQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxGYXN0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25TdHlsZWQgaWNvbj17ZmFNb3VudGFpbn0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkFyZWE8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+OTgyMCBIZWN0YXJlczwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblN0eWxlZCBpY29uPXtmYU1hbGV9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5Qb3B1bGF0aW9uPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjYwMDAgaW5oYWJpdGFudHM8L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uU3R5bGVkIGljb249e2ZhTGFuZ3VhZ2V9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5FdGhuaWNpdHk8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+UXVlY2h1YTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uU3R5bGVkIGljb249e2ZhRXhjbGFtYXRpb25UcmlhbmdsZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlBvdmVydHk8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+NzAlIG9mIHRoZSAgaW5kaWdlbm91cyA8YnI+PC9icj5wb3B1bGF0aW9uIG9mIEN1c2NvIGxpdmUgaW4gcG92ZXJ0eSBjb25kaXRpb248L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvRmFzdEluZm8+XG5cbiAgICAgICAgICAgICAgICA8L1NlY3Rpb25JbmZvQ29udGFpbmVyPlxuXG5cbiAgICAgICAgICAgICAgICA8QnJpZWZTZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDxJbmZvSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblN0eWxlZCBpY29uPXtmYUxpc3RBbHR9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5FY29zaXN0ZW1hL0Vjb2xvZ8OtYTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlnaHQgYmV0d2VlbiAzMjAwIGFuZCA1MDAwIG1ldGVycyBhYm92ZSBzZWEgbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuTWl4ZWQgdXNlIG9mIHNvaWxzLCBpbmNsdWRpbmcgcm90YXRpb25hbCBmaWVsZHMgKG11eXV5cyksIHBlcm1hbmVudCBjdWx0aXZhdGlvbiBmaWVsZHMgKGNoYWNyYXMpLCBuYXRpdmUgc2hydWJzIGFuZCBmb3Jlc3RzLCBub24tbmF0aXZlIGZvcmVzdHMsIGdyYXppbmcgYXJlYXMsIGxha2VzLCByaXZlcnMgYW5kIHdldGxhbmRzPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L0luZm9JdGVtPlxuICAgICAgICAgICAgICAgICAgICA8VmVydGljYWxCb3JkZXI+PC9WZXJ0aWNhbEJvcmRlcj5cblxuICAgICAgICAgICAgICAgICAgICA8SW5mb0l0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uU3R5bGVkIGljb249e2ZhTGlzdEFsdH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+QmlvbG9naWNhbCBhbmQgR2VuZXRpYyBEaXZlcnNpdHk8L2gzPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxGb250QXdlc29tZUljb25MaXN0IGljb249e2ZhQXJyb3dBbHRDaXJjbGVSaWdodH0vPlZhcmlvdXMgdHJhZGl0aW9uYWwgY3JvcHMgc3VjaCBhcyB0YXJ3aSwgcXVpbm9hLCBraXdpY2hhLCBjb3JuLCBiZWFucywgb2xsdWNvLCBvY2EuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PEZvbnRBd2Vzb21lSWNvbkxpc3QgaWNvbj17ZmFBcnJvd0FsdENpcmNsZVJpZ2h0fS8+MTQwMCB2YXJpZXRpZXMgb2YgbmF0aXZlIHBvdGF0byBhbmQgb3RoZXIgQW5kZWFuIHR1YmVyczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxGb250QXdlc29tZUljb25MaXN0IGljb249e2ZhQXJyb3dBbHRDaXJjbGVSaWdodH0vPlJhaXNpbmcgYW5pbWFscyB0aGF0IHByb3ZpZGUgbWVhdCAoZ3VpbmVhIHBpZywgYWxwYWNhKSwgc2hlZXAncyB3b29sLCBsbGFtYSBhbmQgYWxwYWNhOyBtZWRpY2luZXMuPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PEZvbnRBd2Vzb21lSWNvbkxpc3QgaWNvbj17ZmFBcnJvd0FsdENpcmNsZVJpZ2h0fS8+TWljcm9nZW5lY2VudGVyIG9mIGRvbWVzdGljYXRpb24uIDMgc3BlY2llcyAtIHdpbGQgcG90YXRvLjwvbGk+IFxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9JbmZvSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsQm9yZGVyPjwvVmVydGljYWxCb3JkZXI+XG4gICAgICAgICAgICAgICAgICAgIDxJbmZvSXRlbT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblN0eWxlZCBpY29uPXtmYUxpc3RBbHR9Lz5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q29tdW5pZGFkZXM8L2gzPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxGb250QXdlc29tZUljb25MaXN0IGljb249e2ZhQXJyb3dBbHRDaXJjbGVSaWdodH0vPkN1eW8gR3JhbmRlPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PEZvbnRBd2Vzb21lSWNvbkxpc3QgaWNvbj17ZmFBcnJvd0FsdENpcmNsZVJpZ2h0fS8+U2FjYWNhPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PEZvbnRBd2Vzb21lSWNvbkxpc3QgaWNvbj17ZmFBcnJvd0FsdENpcmNsZVJpZ2h0fS8+Q2hhd2F5dGlyZTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxGb250QXdlc29tZUljb25MaXN0IGljb249e2ZhQXJyb3dBbHRDaXJjbGVSaWdodH0vPkFtYXJ1PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PEZvbnRBd2Vzb21lSWNvbkxpc3QgaWNvbj17ZmFBcnJvd0FsdENpcmNsZVJpZ2h0fS8+UGFtcGFsbGFxdGE8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48Rm9udEF3ZXNvbWVJY29uTGlzdCBpY29uPXtmYUFycm93QWx0Q2lyY2xlUmlnaHR9Lz5QYXJ1IFBhcnU8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9JbmZvSXRlbT5cbiAgICAgICAgICAgICAgICA8L0JyaWVmU2VjdGlvbj5cblxuICAgICAgICAgICAgICAgIDxTZWN0aW9uSW5mb0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPGgyPkVjb25vbWljYWwgQWN0aXZpdGllczwvaDI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGYXN0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uU3R5bGVkIGljb249e2ZhVHJhY3Rvcn0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+QWdyaWN1bHR1cmU8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25TdHlsZWQgaWNvbj17ZmFTZWVkbGluZ30vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+U2VlZCBjb21wYW55PC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25TdHlsZWQgaWNvbj17ZmFIaWtpbmd9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkFncm8tZWNvdHVyaXNtPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRmFzdEluZm8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGYXN0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uU3R5bGVkIGljb249e2ZhVXRlbnNpbHN9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkdhc3Ryb25vbXk8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvblN0eWxlZCBpY29uPXtmYUhhbmRzfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5DcmFmdHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb25TdHlsZWQgaWNvbj17ZmFDYXJyb3R9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk5hdHVyYWwgUHJvZHVjdHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9GYXN0SW5mbz5cbiAgICAgICAgICAgICAgICA8L1NlY3Rpb25JbmZvQ29udGFpbmVyPlxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8Q2FyZHNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltZ0lubm92YWNpb25lQmlvfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+QmlvY3VsdHVyYWwgaW5ub3ZhdGlvbnMgaW4gdGhlIFBvdGF0byBQYXJrPC9oMz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgUG90YXRvIFBhcmsgaXMgbm90IGp1c3QgYW4gaW5pdGlhdGl2ZSB0byBjb25zZXJ2ZSB2YXJpZXRpZXMgb2YgcG90YXRvZXMuIEl0IGlzLCBhYm92ZSBhbGwsIGEgYmlvY3VsdHVyYWwgdGVycml0b3J5IGRlZGljYXRlZCB0byB0aGUgY29uc2VydmF0aW9uIG9mIHRoZSBoZXJpdGFnZSBvZiB0aGUgaW5kaWdlbm91cyBjb21tdW5pdGllcyB0aGF0IGxpdmUgdGhlcmUuIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2FuZGVzLmNlbnRlci93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wNy9HMDM5MTcucGRmXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiA+TEVFUiBNQVM8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZD5cblxuXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltZ1Npc3RlbWFBeWxsdX0gLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlRoZSBBeWxsdSBTeXN0ZW0gb2YgdGhlIFBvdGF0byBQYXJrPC9oMz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90IG9ubHkgaHVuZHJlZHMgb2YgY3VsdGl2YXRlZCBwb3RhdG8gdmFyaWV0aWVzIGJ1dCBhbHNvIHRoZSByZWxhdGVkIHdpbGQgc3BlY2llcywgdGhlIGxhbmRzY2FwZSBhbmQgYWxsIGl0cyBlbGVtZW50cyB3aGljaCBpbmNsdWRlIHRoZSBrbm93bGVkZ2UsIHRyYWRpdGlvbnMsIGlubm92YXRpb25zLCBhbmQgd29ybGR2aWV3IG9mIHRoZSBtb3JlIHRoYW4gNiwwMDAgaW5oYWJpdGFudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3NhdG95YW1hLWluaXRpYXRpdmUub3JnL29sZC90aGUtYXlsbHUtc3lzdGVtLW9mLXRoZS1wb3RhdG8tcGFyay9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiID5MRUVSIE1BUzwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltZ0FncmljdWx0b3Jlc30gLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlBlcnV2aWFuIEZhcm1lcnMgY291bGQgU2F2ZSB0aGUgUGxhbmV0PC9oMz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90IG9ubHkgaHVuZHJlZHMgb2YgY3VsdGl2YXRlZCBwb3RhdG8gdmFyaWV0aWVzIGJ1dCBhbHNvIHRoZSByZWxhdGVkIHdpbGQgc3BlY2llcywgdGhlIGxhbmRzY2FwZSBhbmQgYWxsIGl0cyBlbGVtZW50cyB3aGljaCBpbmNsdWRlIHRoZSBrbm93bGVkZ2UsIHRyYWRpdGlvbnMsIGlubm92YXRpb25zLCBhbmQgd29ybGR2aWV3IG9mIHRoZSBtb3JlIHRoYW4gNiwwMDAgaW5oYWJpdGFudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL21vZGVybmZhcm1lci5jb20vMjAxOS8xMi9ob3ctcGVydXZpYW4tcG90YXRvZXMtbWlnaHQtYmUta2V5LXRvLWZlZWRpbmctdGhlLXBsYW5ldC9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiID5MRUVSIE1BUzwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgIDwvQ2FyZHNDb250YWluZXI+XG4gICAgICAgICAgICA8L1NlY3Rpb25Db250YWluZXI+XG4gICAgICAgICAgICBcbiAgICAgICAgPC9NYXJnaW5Ub3BDb250YWluZXI+XG4gICAgKTtcbn1cbiBcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG90YXRvUGFyayk7Il19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Card=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8gjcr63\",label:\"Card\"})( false?undefined:{name:\"zl0pme\",styles:\"display:flex;flex-direction:column;flex-basis:33.33%;flex-grow:1;align-items:center;background-color:#eaeade;line-height:1.2;margin:2rem;border-radius:1rem;padding-bottom:1.5rem;@media (max-width:768px){margin:1rem 0 1rem 0;}img{max-width:100%;max-height:100%;border-radius:1rem 1rem 0 0;}h3{color:#44841a;padding:0 1rem 0 1rem;}span{padding:1rem 1rem 2rem 1rem;font-weight:400;font-size:1rem;color:#545454;}a{text-decoration:none;background-color:#f07723;color:#fff;padding:.8rem;border-radius:10px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SectionInfoContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8gjcr64\",label:\"SectionInfoContainer\"})( false?undefined:{name:\"17yfjsm\",styles:\"margin:2rem 0;h2{text-align:center;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var FastInfo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8gjcr65\",label:\"FastInfo\"})( false?undefined:{name:\"1weki8a\",styles:\"display:flex;justify-content:space-evenly;align-content:center;text-align:center;margin:4rem 0;@media(max-width:768px){flex-direction:column;div{margin:1rem 0;}}p{color:#000;padding:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PotatoPark=(_ref)=>{var{state}=_ref;return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"MarginTopContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"HeadContainer\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"Title\"],null,\"Potato Park - Pisaq\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"Separator\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_4__[\"SubTitle\"],null,\"The Ayllu System\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"br\",null),\"Biocultural innovations\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MainParagraph,null,\"The Potato Park is not just a conservation initiative for various varieties of potatoes. It is, above all, a bio-cultural territory dedicated to the conservation of the heritage of six indigenous communities that live here: not only hundreds of cultivated varieties but also related wild species, the landscape and its elements that also include knowledge, traditions, innovations and the worldview of the more than 6000 inhabitants.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionInfoContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FastInfo,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faMountain\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Area\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"9820 Hectares\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faMale\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Population\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"6000 inhabitants\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faLanguage\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Ethnicity\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Quechua\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faExclamationTriangle\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Poverty\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"70% of the  indigenous \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"br\",null),\"population of Cusco live in poverty condition\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"BriefSection\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"InfoItem\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faListAlt\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Ecosistema/Ecolog\\xEDa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Height between 3200 and 5000 meters above sea level\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Mixed use of soils, including rotational fields (muyuys), permanent cultivation fields (chacras), native shrubs and forests, non-native forests, grazing areas, lakes, rivers and wetlands\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Dropdown__WEBPACK_IMPORTED_MODULE_10__[\"VerticalBorder\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"InfoItem\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faListAlt\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Biological and Genetic Diversity\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Various traditional crops such as tarwi, quinoa, kiwicha, corn, beans, olluco, oca.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"1400 varieties of native potato and other Andean tubers\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Raising animals that provide meat (guinea pig, alpaca), sheep's wool, llama and alpaca; medicines.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Microgenecenter of domestication. 3 species - wild potato.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Dropdown__WEBPACK_IMPORTED_MODULE_10__[\"VerticalBorder\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"InfoItem\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faListAlt\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Comunidades\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Cuyo Grande\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Sacaca\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Chawaytire\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Amaru\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Pampallaqta\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconList\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faArrowAltCircleRight\"]}),\"Paru Paru\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionInfoContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",null,\"Economical Activities\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FastInfo,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faTractor\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Agriculture\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faSeedling\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Seed company\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faHiking\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Agro-ecoturism\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FastInfo,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faUtensils\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Gastronomy\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faHands\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Crafts\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_TerritoriosCulturales__WEBPACK_IMPORTED_MODULE_9__[\"FontAwesomeIconStyled\"],{icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_8__[\"faCarrot\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Natural Products\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CardsContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:_static_images_link4_jpeg__WEBPACK_IMPORTED_MODULE_7___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Biocultural innovations in the Potato Park\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",null,\"The Potato Park is not just an initiative to conserve varieties of potatoes. It is, above all, a biocultural territory dedicated to the conservation of the heritage of the indigenous communities that live there.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"http://andes.center/wp-content/uploads/2018/07/G03917.pdf\",target:\"_blank\",rel:\"noopener\"},\"LEER MAS\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:_static_images_parquepapa2_jpg__WEBPACK_IMPORTED_MODULE_6___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"The Ayllu System of the Potato Park\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",null,\"Not only hundreds of cultivated potato varieties but also the related wild species, the landscape and all its elements which include the knowledge, traditions, innovations, and worldview of the more than 6,000 inhabitants.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://satoyama-initiative.org/old/the-ayllu-system-of-the-potato-park/\",target:\"_blank\",rel:\"noopener\"},\"LEER MAS\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:_static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_5___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"Peruvian Farmers could Save the Planet\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",null,\"Not only hundreds of cultivated potato varieties but also the related wild species, the landscape and all its elements which include the knowledge, traditions, innovations, and worldview of the more than 6,000 inhabitants.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://modernfarmer.com/2019/12/how-peruvian-potatoes-might-be-key-to-feeding-the-planet/\",target:\"_blank\",rel:\"noopener\"},\"LEER MAS\")))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(PotatoPark));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/andes-theme/src/components/potatoPark.js\n");

/***/ })

})