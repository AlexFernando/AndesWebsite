webpackHotUpdate("andes",{

/***/ "./packages/andes-theme/src/SearchBar.js":
/*!***********************************************!*\
  !*** ./packages/andes-theme/src/SearchBar.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ \"./node_modules/@fortawesome/react-fontawesome/index.es.js\");\n/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ \"./node_modules/@fortawesome/free-solid-svg-icons/index.es.js\");\n/* harmony import */ var _bgImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bgImage */ \"./packages/andes-theme/src/bgImage.js\");\n/* harmony import */ var _Filosofia__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Filosofia */ \"./packages/andes-theme/src/Filosofia.js\");\n/* harmony import */ var _LinkButton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./LinkButton */ \"./packages/andes-theme/src/LinkButton.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var SearchBar=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"exywn9i0\",label:\"SearchBar\"})( false?undefined:{name:\"mgz2wl\",styles:\"display:flex;justify-content:space-evenly;align-items:center;padding-top:2rem;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var InputBar=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"form\",{target:\"exywn9i1\",label:\"InputBar\"})( false?undefined:{name:\"1j4hpl2\",styles:\"display:flex;flex-basis:70%;justify-content:flex-start;align-items:center;background-color:#fff;padding:1rem 2rem 1rem 2rem;border:1px solid #000;input{font-size:1.6rem;border:none;outline:none;padding-left:1rem;width:70%;@media (max-width:768px){font-size:1rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PostStyled=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"exywn9i2\",label:\"PostStyled\"})( false?undefined:{name:\"1328907\",styles:\"background-color:#fff;padding:2rem;margin:2rem;h3{color:#44841a;font-size:1.8rem;}p{font-size:1.3rem;}@media (max-width:768px){margin:1rem;div{font-size:.8rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var NotFoundContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"exywn9i3\",label:\"NotFoundContainer\"})( false?undefined:{name:\"1rqb3x2\",styles:\"text-align:center;margin-top:2rem;color:#545454;h2{font-size:2rem;}h3{font-size:1.8rem;}p{font-size:1.5rem;font-weight:700;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var _ref= false?undefined:{name:\"vfnmr5-SearchBarComponent\",styles:\"margin-top:18vh;;label:SearchBarComponent;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1xa4srv-SearchBarComponent\",styles:\"font-size:1.8rem;color:#44841a;;label:SearchBarComponent;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var SearchBarComponent=(_ref3)=>{var{state}=_ref3;var people=[{titulo:\"Semillas de Papa\",content:\"Para los pueblos indígenas, las semillas son más que alimentos: son miembros de su familia\",categoria:\"Categoria 1\",fecha:\"Noviembre 17, 2020\"},{titulo:\"Cómo el Parque de la Papa del Perú podría evitar la crisis alimentaria mundial\",content:\"El parque agrícola alto en los Andes conserva la experiencia para criar cepas aptas para un clima cambiante. Para los pueblos indígenas, las semillas son más que alimentos: son miembros de su familia\",categoria:\"Categoria 2\",fecha:\"Noviembre 1, 2020\"},{titulo:\"Nota de Prensa: Rechazo de la papa GM en África\",content:\"Los agricultores andinos y africanos condenan la información de secuencia digital de papas de los centros de origen: abre puertas para la biopiratería.\",categoria:\"Categoria 3\",fecha:\"Octubre 15, 2020\"},{titulo:\"El Parque de la Papa – Zona de Agrobiodiversidad\",content:\"El Parque de la Papa fue reconocido recientemente como una Zona de Agrobiodiversidad por el estado peruano.\",categoria:\"Categoria 2\",fecha:\"Septiembre 15, 2020\"},{titulo:\"Respuestas locales a la crisis COVID-19\",content:\"Igual que nuestros hermanos y hermanas en todo el mundo, nos enfrentamos a desafíos sin precedentes en el contexto de la pandemia actual. Estamos trabajando para proporcionar recursos a nuestros socios indígenas, apoyar a nuestro personal, y re-imaginar formas de trabajar en un mundo donde las reuniones grupales se han vuelto imposibles.\",categoria:\"Categoria 1\",fecha:\"Julio 15, 2020\"}];var[searchTerm,setSearchTerm]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[searchResults,setSearchResults]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]);var[alternativeTerm,setAlternativeTerm]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var handleChange=event=>{setSearchTerm(event.target.value);};var handleSubmit=e=>{e.preventDefault();var results=people.filter(person=>person.titulo.toLowerCase().includes(searchTerm)||person.content.toLowerCase().includes(searchTerm));setSearchResults(results);if(results.length===0&&searchTerm){setAlternativeTerm(searchTerm);}setSearchTerm(\"\");};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Filosofia__WEBPACK_IMPORTED_MODULE_7__[\"SectionContainer\"],{css:_ref},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SearchBar,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(InputBar,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__[\"FontAwesomeIcon\"],{css:_ref2,icon:_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__[\"faSearch\"]}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"input\",{type:\"text\",placeholder:\"What are you searching for?\",value:searchTerm,onChange:handleChange})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_bgImage__WEBPACK_IMPORTED_MODULE_6__[\"ButtonAction\"],{onClick:handleSubmit},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_LinkButton__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{href:\"/searchbar\"},\"BUSCAR\"))),searchResults.length===0&&alternativeTerm===\"\"?people.map(item=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(PostStyled,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,item.titulo),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,item.content),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,item.categoria),\"\\xA0 \\xA0 \\xA0\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"|\"),\"\\xA0 \\xA0 \\xA0\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"Fecha:\"),\"\\xA0\\xA0\",item.fecha))):null,searchResults.map(item=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(PostStyled,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,item.titulo),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,item.content),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,item.categoria),\"\\xA0 \\xA0 \\xA0\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"|\"),\"\\xA0 \\xA0 \\xA0\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"Fecha:\"),\"\\xA0\\xA0\",item.fecha))),alternativeTerm!==\"\"&&searchResults.length===0?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NotFoundContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",null,\"Oops!\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h3\",null,\"We coudn't find any content related to the word \\\"\",alternativeTerm,\"\\\"\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Plase use another term of search\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Thank you.\")):null);};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(SearchBarComponent));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/andes-theme/src/SearchBar.js\n");

/***/ })

})