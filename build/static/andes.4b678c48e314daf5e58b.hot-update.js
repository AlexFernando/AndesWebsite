webpackHotUpdate("andes",{

/***/ "./packages/andes-theme/src/components/HomePage.js":
/*!*********************************************************!*\
  !*** ./packages/andes-theme/src/components/HomePage.js ***!
  \*********************************************************/
/*! exports provided: SectionText, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SectionText\", function() { return SectionText; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _static_images_link2_jpg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../static//images/link2.jpg */ \"./packages/andes-theme/src/static/images/link2.jpg\");\n/* harmony import */ var _static_images_link2_jpg__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_static_images_link2_jpg__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _static_images_homenews_jpeg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../static/images/homenews.jpeg */ \"./packages/andes-theme/src/static/images/homenews.jpeg\");\n/* harmony import */ var _static_images_homenews_jpeg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_static_images_homenews_jpeg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _static_images_1_jpeg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../static/images/1.jpeg */ \"./packages/andes-theme/src/static/images/1.jpeg\");\n/* harmony import */ var _static_images_1_jpeg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_static_images_1_jpeg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _static_images_FotogrupalANDESytecnicosscaled_jpg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../static/images/FotogrupalANDESytecnicosscaled.jpg */ \"./packages/andes-theme/src/static/images/FotogrupalANDESytecnicosscaled.jpg\");\n/* harmony import */ var _static_images_FotogrupalANDESytecnicosscaled_jpg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_static_images_FotogrupalANDESytecnicosscaled_jpg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../static/images/parquepapa.jpg */ \"./packages/andes-theme/src/static/images/parquepapa.jpg\");\n/* harmony import */ var _static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _static_images_publicaciones_the_culinary_sanctuary_of_the_potato_park_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../static/images/publicaciones/the-culinary-sanctuary-of-the-potato-park.png */ \"./packages/andes-theme/src/static/images/publicaciones/the-culinary-sanctuary-of-the-potato-park.png\");\n/* harmony import */ var _static_images_publicaciones_the_culinary_sanctuary_of_the_potato_park_png__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_static_images_publicaciones_the_culinary_sanctuary_of_the_potato_park_png__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _Link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Link */ \"./packages/andes-theme/src/components/Link.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var SectionText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff0\",label:\"SectionText\"})( false?undefined:{name:\"1lowsnn\",styles:\"display:flex;justify-content:center;align-items:center;padding:3rem 2rem 1rem 2rem;@media(max-width:768px){flex-direction:column;padding:3rem 1rem 1rem 1rem;}div{display:flex;justify-content:center;align-items:center;flex-direction:column;padding:1rem 2rem 1rem 2rem;@media(max-width:768px){padding:1rem;}h1{color:#44841a;text-align:center;}p{color:#545454;font-size:1.2rem;margin-bottom:0rem;text-align:center;}div{display:flex;justify-content:center;align-items:center;a{text-decoration:none;background-color:#f07723;text-transform:uppercase;color:#fff;padding:1rem;border-radius:10px;text-align:center;margin-bottom:2rem;font-weight:700;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SectionHomePage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff1\",label:\"SectionHomePage\"})( false?undefined:{name:\"fstzj5\",styles:\"background-color:#eaeaea;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardsHomeContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff2\",label:\"CardsHomeContainer\"})( false?undefined:{name:\"amkdft\",styles:\"display:flex;justify-content:center;align-items:center;@media (max-width:768px){flex-direction:column;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FsZXhmL3JlYWN0XzIwMjAvYW5kZXMvcGFja2FnZXMvYW5kZXMtdGhlbWUvc3JjL2NvbXBvbmVudHMvSG9tZVBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0VxQyIsImZpbGUiOiIvaG9tZS9hbGV4Zi9yZWFjdF8yMDIwL2FuZGVzL3BhY2thZ2VzL2FuZGVzLXRoZW1lL3NyYy9jb21wb25lbnRzL0hvbWVQYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgaW1nUmVzZWFyY2ggZnJvbSAnLi4vc3RhdGljLy9pbWFnZXMvbGluazIuanBnJztcbmltcG9ydCBob21lTmV3cyBmcm9tICcuLi9zdGF0aWMvaW1hZ2VzL2hvbWVuZXdzLmpwZWcnO1xuaW1wb3J0IHBvdGF0b1BhcmsgZnJvbSAnLi4vc3RhdGljL2ltYWdlcy8xLmpwZWcnO1xuaW1wb3J0IHBlcnNvbmFzMjUgZnJvbSAnLi4vc3RhdGljL2ltYWdlcy9Gb3RvZ3J1cGFsQU5ERVN5dGVjbmljb3NzY2FsZWQuanBnJ1xuaW1wb3J0IHByb3llY3RvczI1IGZyb20gJy4uL3N0YXRpYy9pbWFnZXMvcGFycXVlcGFwYS5qcGcnXG5pbXBvcnQgcHVibGljYWNpb25lczI1IGZyb20gIFwiLi4vc3RhdGljL2ltYWdlcy9wdWJsaWNhY2lvbmVzL3RoZS1jdWxpbmFyeS1zYW5jdHVhcnktb2YtdGhlLXBvdGF0by1wYXJrLnBuZ1wiXG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnXG5cbmV4cG9ydCBjb25zdCBTZWN0aW9uVGV4dCA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmc6IDNyZW0gMnJlbSAxcmVtIDJyZW07XG5cbiAgICBAbWVkaWEobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBwYWRkaW5nOiAzcmVtIDFyZW0gMXJlbSAxcmVtO1xuICAgIH1cblxuICAgIGRpdiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW0gMXJlbSAycmVtO1xuXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAgIFxuICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGgxIHtcbiAgICAgICAgICAgIGNvbG9yOiAjNDQ4NDFhO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcCB7XG4gICAgICAgICAgICBjb2xvcjogIzU0NTQ1NDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHJlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfSAgXG5cblxuICAgIGRpdiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICBcbiAgICAgICAgYSB7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjA3NzIzO1xuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmA7XG5cbmNvbnN0IFNlY3Rpb25Ib21lUGFnZSA9IHN0eWxlZC5kaXZgIFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlYWVhZWE7XG5gO1xuXG5jb25zdCBDYXJkc0hvbWVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KXtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG5gO1xuXG5jb25zdCBDYXJkc0hvbWUgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW46IDFyZW0gMnJlbTtcbiAgICBmbGV4LWJhc2lzOiAzMy4zMyU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7XG4gICAgICAgIG1hcmdpbjogMXJlbTtcbiAgICB9XG5cbiAgICBkaXYge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGltZyB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIHN0cm9uZyB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjA3NzIzIDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IC41cmVtO1xuICAgICAgICAgICAgdG9wOiAtLjVyZW07XG4gICAgICAgICAgICBsZWZ0OiAtMS4ycmVtO1xuICAgICAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTMwZGVnKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaDMge1xuICAgICAgICBjb2xvcjogIzQ0ODQxYTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuIFxuXG4gICAgc3BhbiB7XG4gICAgICAgIHBhZGRpbmc6IDFyZW0gMXJlbSAycmVtIDFyZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgIFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgICAgXG4gICAgfVxuXG4gICAgZGl2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1iYXNpczogNTAlO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcblxuICAgICAgICBhIHtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0NDg0MWE7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIHBhZGRpbmc6IC44cmVtO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuICAgIH1cbmA7XG4gXG5jb25zdCBIb21lUGFnZSA9ICh7c3RhdGV9KSA9PiB7XG4gICAgcmV0dXJuICggXG4gICAgICAgIDw+XG4gICAgICAgIDxTZWN0aW9uVGV4dD5cbiAgICAgICAgICAgIDxkaXY+ICBcbiAgICAgICAgICAgICAgICA8aDE+V2VsY29tZSB0byBBTkRFUzwvaDE+ICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBBTkRFUyBhY3RpdmVseSB3b3JrcyBvbiBpc3N1ZXMgb2YgYmlvZGl2ZXJzaXR5IGNvbnNlcnZhdGlvbiwgaW5kaWdlbm91cyByaWdodHMsIGFuZCBzdXN0YWluYWJsZSBkZXZlbG9wbWVudC4gRnVydGhlcm1vcmUsIHdlIHByb21vdGUgdGhlIGhvcml6b250YWwgZXhjaGFuZ2Ugb2YgZXhwZXJpZW5jZXMgYW5kIHBvbGljaWVzIHdoaWNoIHZhbHVlIHRyYWRpdGlvbmFsIGFuZCBpbmRpZ2Vub3VzIGtub3dsZWRnZSBhbmQgY29udHJpYnV0ZSB0byB0aGUgZ2xvYmFsIGRpYWxvZ3VlIG9uIGNsaW1hdGUgY2hhbmdlLlxuICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvZmlsb3NvZmlhXCI+RXhwbG9yZTwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1NlY3Rpb25UZXh0PlxuXG4gICAgICAgIDxTZWN0aW9uSG9tZVBhZ2U+XG4gICAgICAgICAgICA8Q2FyZHNIb21lQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxDYXJkc0hvbWU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwZXJzb25hczI1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8aDM+MjUgUEVPUExFPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgQXMgcGFydCBvZiBvdXIgMjV0aCBhbm5pdmVyc2FyeSBjZWxlYnJhdGlvbnMsIEFOREVTIHdvdWxkIGxpa2UgdG8gdGhhbmsgZXZlcnlvbmUgd2hvIGhhcyBjb250cmlidXRlZCB0byBpbnN0aXR1dGlvbmFsIGRldmVsb3BtZW50LCBjb2xsYWJvcmF0aXZlIHJlc2VhcmNoIGFuZCBrbm93bGVkZ2Ugc2hhcmluZy5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9hbml2ZXJzYXJpb3BlcnNvbmFzXCIgPlJFQUQgTU9SRTwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gXG4gICAgICAgICAgICAgICAgPC9DYXJkc0hvbWU+XG4gICAgICAgICAgICAgICAgPENhcmRzSG9tZT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwcm95ZWN0b3MyNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8aDM+MjUgUFJPSkVUUywgRVhDSEFOR0VTIFkgQ0FNUEFJTkdTPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFdlIHdvdWxkIGxpa2UgdG8gc2hhcmUgc29tZSBvZiB0aGUgcmVzdWx0cyBvZiB0aGUgcGFzdCBwcm9qZWN0cywgY2FtcGFpZ25zIGFuZCBldmVudHMgb2YgQU5ERVMsIHdoaWNoLCBvZiBjb3Vyc2UsIGFyZSBvbmx5IHBvc3NpYmxlIHRoYW5rcyB0byB0aGUgaW1wb3J0YW50IGNvbnRyaWJ1dGlvbnMgb2Ygb3VyIHBhcnRuZXJzLiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvYW5pdmVyc2FyaW9wcm95ZWN0b3NcIiA+UkVBRCBNT1JFPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L0NhcmRzSG9tZT5cblxuICAgICAgICAgICAgICAgIDxDYXJkc0hvbWU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cHVibGljYWNpb25lczI1fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGgzPjI1IFBVQkxJQ0FUSU9OUzwvaDM+XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgV2Ugd291bGQgbGlrZSB0byBzaGFyZSBzb21lIG9mIHRoZSByZXN1bHRzIG9mIG91ciByZXNlYXJjaCB0aHJvdWdoIHB1YmxpY2F0aW9ucyB3aGljaCwgb2YgY291cnNlLCBhcmUgb25seSBwb3NzaWJsZSB0aGFua3MgdG8gdGhlIGltcG9ydGFudCBjb250cmlidXRpb25zIG9mIG91ciBwYXJ0bmVycy5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvYW5pdmVyc2FyaW9wdWJsaWNhY2lvbmVzXCIgPlJFQUQgTU9SRTwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9DYXJkc0hvbWU+XG4gICAgICAgICAgICA8L0NhcmRzSG9tZUNvbnRhaW5lcj5cbiAgICAgICAgPC9TZWN0aW9uSG9tZVBhZ2U+ICAgICAgIFxuXG4gICAgICAgIDxTZWN0aW9uVGV4dD5cbiAgICAgICAgICAgIDxkaXY+ICBcbiAgICAgICAgICAgICAgICA8aDE+UGx1cml2ZXJzaXR5IC0gWWFjaGF5IEt1eWNoaTwvaDE+ICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgVGhlIFlhY2hheSBLdXljaGkgUGx1cml2ZXJzaXR5IChSYWluYm93IG9mIEtub3dsZWRnZSksIGlzIGFuIGludGVybmF0aW9uYWwgaW5zdGl0dXRpb24gb2YgaW50ZXJjdWx0dXJhbCBlZHVjYXRpb24gYW5kIHJlc2VhcmNoLCBhbmQgYSBjZW50ZXIgb2YgZXhjZWxsZW5jZSBpbiBpbmRpZ2Vub3VzIGZvb2Qgc3lzdGVtcyBhbmQgYmlvY3VsdHVyYWwgbGFuZHNjYXBlc1xuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3F1aWVuZXNzb21vc1wiPkxFQVJOPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXY+ICBcbiAgICAgICAgICAgICAgICA8aDE+UG90YXRvIFBhcms8L2gxPiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIFRoZSBQb3RhdG8gUGFyayBpcyBsb2NhdGVkIGluIHRoZSBQaXNhYyBkaXN0cmljdCwgYXBwcm94aW1hdGVseSA0MCBraWxvbWV0ZXJzIGZyb20gdGhlIGNpdHkgb2YgQ3VzY28gKFBlcnUpLCBpbiB0aGUgU2FjcmVkIFZhbGxleSBvZiB0aGUgSW5jYXMuIENvdmVyaW5nIGFuIGFyZWEgb2Yg4oCL4oCLOTI4MCBoZWN0YXJlcyBhbmQgbG9jYXRlZCBhdCBhIGhlaWdodCBiZXR3ZWVuIDM0MDAgYW5kIDQ2MDAgbWV0ZXJzIGFib3ZlIHNlYSBsZXZlbC5cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9wYXJxdWVkZWxhcGFwYS1waXNhY1wiPkxFQVJOPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU2VjdGlvblRleHQ+XG5cblxuICAgICAgICA8U2VjdGlvbkhvbWVQYWdlPlxuICAgICAgICAgICAgPENhcmRzSG9tZUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8Q2FyZHNIb21lPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17aG9tZU5ld3N9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+TmV3czwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5JbmRpZ2Vub3VzIFJlc2lsaWVuY2U8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJvbSB0aGUgTW9uZ29saWFuIFN0ZXBwZXMgdG8gdGhlIEFuZGVhbiBNb3VudGFpbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5jdWx0dXJhbHN1cnZpdmFsLm9yZy9wdWJsaWNhdGlvbnMvY3VsdHVyYWwtc3Vydml2YWwtcXVhcnRlcmx5L2luZGlnZW5vdXMtcmVzaWxpZW5jZS1tb25nb2xpYW4tc3RlcHBlcy1hbmRlYW4tbW91bnRhaW5zXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiA+UkVBRCBNT1JFPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiBcbiAgICAgICAgICAgICAgICA8L0NhcmRzSG9tZT5cbiAgICAgICAgICAgICAgICA8Q2FyZHNIb21lPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltZ1Jlc2VhcmNofSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5FdmVudDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxoMz5Bbm5pdmVyc2FyeSBBTkRFUzwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICBKb2luIHVzLCB0byB0aGUgY2VsZWJyYXRpb24gb2YgMjUgeWVhcnMgc2FmZWd1YXJkaW5nIHRoZSBiaW9jdWx0dXJhbCBoZXJpdGFnZVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9cIiA+UkVBRCBNT1JFPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L0NhcmRzSG9tZT5cblxuICAgICAgICAgICAgICAgIDxDYXJkc0hvbWU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cG90YXRvUGFya30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+UHVibGljYXRpb248L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxoMz5SZXNlYXJjaDwvaDM+XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJzcGVjaWVzIHJlc3BlY3QgYW5kIFBvdGF0byBDb25zZXJ2YXRpb24gaW4gdGhlIFBlcnV2aWFuIGNyYWRsZSBvZiBkb21lc3RpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2FuZGVzLmNlbnRlci93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wNC9BU0hTXzI4LTIwMTgtNF9QSU1CRVJULnBkZlwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgPlJFQUQgTU9SRTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9DYXJkc0hvbWU+XG4gICAgICAgICAgICA8L0NhcmRzSG9tZUNvbnRhaW5lcj5cbiAgICAgICAgPC9TZWN0aW9uSG9tZVBhZ2U+XG5cbiAgICAgICAgPC8+XG4gICAgKTtcbn1cbiBcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZVBhZ2UpOyJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardsHome=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ecnu3ff3\",label:\"CardsHome\"})( false?undefined:{name:\"u7398v\",styles:\"display:flex;flex-direction:column;margin:1rem 2rem;flex-basis:33.33%;background-color:#fff;@media (max-width:768px){margin:1rem;}div{position:relative;img{width:100%;}strong{display:flex;justify-content:center;background-color:#f07723;align-items:center;position:absolute;padding:.5rem;border-radius:.5rem;top:-.5rem;left:-1.2rem;font-size:.8rem;color:#fff;transform:rotate(-30deg);}}h3{color:#44841a;text-align:center;}span{padding:1rem 1rem 2rem 1rem;font-weight:400;font-size:1rem;text-align:center;}div{display:flex;flex-basis:50%;justify-content:center;margin-bottom:1rem;a{text-decoration:none;background-color:#44841a;color:#fff;padding:.8rem;border-radius:10px;text-align:center;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HomePage=(_ref)=>{var{state}=_ref;return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(SectionText,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h1\",null,\"Welcome to ANDES\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",null,\"ANDES actively works on issues of biodiversity conservation, indigenous rights, and sustainable development. Furthermore, we promote the horizontal exchange of experiences and policies which value traditional and indigenous knowledge and contribute to the global dialogue on climate change.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/filosofia\"},\"Explore\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(SectionHomePage,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHomeContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_FotogrupalANDESytecnicosscaled_jpg__WEBPACK_IMPORTED_MODULE_6___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"25 PEOPLE\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"As part of our 25th anniversary celebrations, ANDES would like to thank everyone who has contributed to institutional development, collaborative research and knowledge sharing.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/aniversariopersonas\"},\"READ MORE\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_parquepapa_jpg__WEBPACK_IMPORTED_MODULE_7___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"25 PROJETS, EXCHANGES Y CAMPAINGS\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"We would like to share some of the results of the past projects, campaigns and events of ANDES, which, of course, are only possible thanks to the important contributions of our partners.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/aniversarioproyectos\"},\"READ MORE\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_publicaciones_the_culinary_sanctuary_of_the_potato_park_png__WEBPACK_IMPORTED_MODULE_8___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"25 PUBLICATIONS\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"We would like to share some of the results of our research through publications which, of course, are only possible thanks to the important contributions of our partners.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/aniversariopublicaciones\"},\"READ MORE\"))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(SectionText,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h1\",null,\"Pluriversity - Yachay Kuychi\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",null,\"The Yachay Kuychi Pluriversity (Rainbow of Knowledge), is an international institution of intercultural education and research, and a center of excellence in indigenous food systems and biocultural landscapes\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/quienessomos\"},\"LEARN\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h1\",null,\"Potato Park\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"p\",null,\"The Potato Park is located in the Pisac district, approximately 40 kilometers from the city of Cusco (Peru), in the Sacred Valley of the Incas. Covering an area of \\u200B\\u200B9280 hectares and located at a height between 3400 and 4600 meters above sea level.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_Link__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{href:\"/parquedelapapa-pisac\"},\"LEARN\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(SectionHomePage,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHomeContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_homenews_jpeg__WEBPACK_IMPORTED_MODULE_4___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"strong\",null,\"News\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"Indigenous Resilience\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"From the Mongolian Steppes to the Andean Mountains\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"a\",{href:\"https://www.culturalsurvival.org/publications/cultural-survival-quarterly/indigenous-resilience-mongolian-steppes-andean-mountains\",target:\"_blank\",rel:\"noopener\"},\"READ MORE\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_link2_jpg__WEBPACK_IMPORTED_MODULE_3___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"strong\",null,\"Event\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"Anniversary ANDES\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"Join us, to the celebration of 25 years safeguarding the biocultural heritage\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"a\",{href:\"/\"},\"READ MORE\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(CardsHome,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"img\",{src:_static_images_1_jpeg__WEBPACK_IMPORTED_MODULE_5___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"strong\",null,\"Publication\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"h3\",null,\"Research\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"span\",null,\"Interspecies respect and Potato Conservation in the Peruvian cradle of domestication\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(\"a\",{href:\"http://andes.center/wp-content/uploads/2018/04/ASHS_28-2018-4_PIMBERT.pdf\",target:\"_blank\",rel:\"noopener\"},\"READ MORE\"))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(HomePage));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/andes-theme/src/components/HomePage.js\n");

/***/ })

})